// Code generated by protoc-gen-go.
// source: SimpleService.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	SimpleService.proto

It has these top-level messages:
	Event
	MyRequest
	MyResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Seq  int64  `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto1.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MyRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *MyRequest) Reset()                    { *m = MyRequest{} }
func (m *MyRequest) String() string            { return proto1.CompactTextString(m) }
func (*MyRequest) ProtoMessage()               {}
func (*MyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MyRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type MyResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *MyResponse) Reset()                    { *m = MyResponse{} }
func (m *MyResponse) String() string            { return proto1.CompactTextString(m) }
func (*MyResponse) ProtoMessage()               {}
func (*MyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MyResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto1.RegisterType((*Event)(nil), "com.github.cceckman.discoirc.prototype.localrpc.Event")
	proto1.RegisterType((*MyRequest)(nil), "com.github.cceckman.discoirc.prototype.localrpc.MyRequest")
	proto1.RegisterType((*MyResponse)(nil), "com.github.cceckman.discoirc.prototype.localrpc.MyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SimpleService service

type SimpleServiceClient interface {
	Do(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*MyResponse, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) Do(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := grpc.Invoke(ctx, "/com.github.cceckman.discoirc.prototype.localrpc.SimpleService/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleService service

type SimpleServiceServer interface {
	Do(context.Context, *MyRequest) (*MyResponse, error)
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.cceckman.discoirc.prototype.localrpc.SimpleService/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).Do(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.cceckman.discoirc.prototype.localrpc.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _SimpleService_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SimpleService.proto",
}

func init() { proto1.RegisterFile("SimpleService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x0e, 0xce, 0xcc, 0x2d,
	0xc8, 0x49, 0x0d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xd2, 0x4f, 0xce, 0xcf, 0xd5, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0x4e, 0x4e, 0x4d,
	0xce, 0xce, 0x4d, 0xcc, 0xd3, 0x4b, 0xc9, 0x2c, 0x4e, 0xce, 0xcf, 0x2c, 0x4a, 0x86, 0xa8, 0x29,
	0xa9, 0x2c, 0x48, 0xd5, 0xcb, 0xc9, 0x4f, 0x4e, 0xcc, 0x29, 0x2a, 0x48, 0x56, 0xb2, 0xe7, 0x62,
	0x75, 0x2d, 0x4b, 0xcd, 0x2b, 0x11, 0x12, 0xe0, 0x62, 0x2e, 0x4e, 0x2d, 0x94, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0e, 0x02, 0x31, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0x14,
	0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x90, 0xaa, 0xdc, 0xe2, 0x74, 0x09, 0x66, 0xb0, 0x10, 0x88,
	0xa9, 0x14, 0xc9, 0xc5, 0xe9, 0x5b, 0x19, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0xe4, 0xc3,
	0xc5, 0x9a, 0x0a, 0x32, 0x0d, 0x6c, 0x0c, 0xb7, 0x91, 0x99, 0x1e, 0x89, 0xce, 0xd1, 0x03, 0xbb,
	0x25, 0x08, 0x62, 0x88, 0x52, 0x14, 0x17, 0x17, 0xc8, 0xe8, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54,
	0xea, 0x9a, 0x6d, 0xd4, 0xc7, 0xc8, 0xc5, 0x8b, 0x12, 0x80, 0x42, 0xb5, 0x5c, 0x4c, 0x2e, 0xf9,
	0x42, 0x56, 0x24, 0x1b, 0x0b, 0xf7, 0xbd, 0x94, 0x35, 0x59, 0x7a, 0x21, 0xde, 0x73, 0x62, 0x8f,
	0x62, 0x05, 0x2b, 0x48, 0x62, 0x03, 0x53, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xf4,
	0xe9, 0xd0, 0xe0, 0x01, 0x00, 0x00,
}
