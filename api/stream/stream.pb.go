// Code generated by protoc-gen-go.
// source: stream.proto
// DO NOT EDIT!

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	stream.proto

It has these top-level messages:
	Id
	Match
	Filter
	Event
	SubscribeRequest
	SubscribeResponse
*/
package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Id identifies a particular stream.
type Id struct {
	// Messages from discoirc itself come under the 'discoirc' plugin.
	Plugin  string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	Channel string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Id) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *Id) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Id) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// Match defines a pattern with with to match an Id.
// The id specifies values to match; the additional fields specify whether
// or not the fields should be used to match.
type Match struct {
	Id           *Id  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MatchPlugin  bool `protobuf:"varint,2,opt,name=match_plugin,json=matchPlugin" json:"match_plugin,omitempty"`
	MatchNetwork bool `protobuf:"varint,3,opt,name=match_network,json=matchNetwork" json:"match_network,omitempty"`
	MatchChannel bool `protobuf:"varint,4,opt,name=match_channel,json=matchChannel" json:"match_channel,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Match) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Match) GetMatchPlugin() bool {
	if m != nil {
		return m.MatchPlugin
	}
	return false
}

func (m *Match) GetMatchNetwork() bool {
	if m != nil {
		return m.MatchNetwork
	}
	return false
}

func (m *Match) GetMatchChannel() bool {
	if m != nil {
		return m.MatchChannel
	}
	return false
}

// A Filter defines a set of streams to subscribe to.
// It is an inclusive filter, e.g. matching any Match allows it to match.
// As a result, an empty Filter matches nothing.
type Filter struct {
	Matches []*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Filter) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

// Event expresses an event on a particular stream.
type Event struct {
	// stream identifies the stream this event occurred on.
	Stream *Id `protobuf:"bytes,1,opt,name=stream" json:"stream,omitempty"`
	// text is a simple text representation of this event.
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Event) GetStream() *Id {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *Event) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SubscribeRequest struct {
	// A Filter on the events to send.
	// Required; servers should return an error if not present.
	Filter *Filter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	// Requests that the last up-to-N messages that match the filter be sent,
	// in addition to any new messages.
	Backfill int32 `protobuf:"varint,2,opt,name=backfill" json:"backfill,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SubscribeRequest) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SubscribeRequest) GetBackfill() int32 {
	if m != nil {
		return m.Backfill
	}
	return 0
}

type SubscribeResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SubscribeResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Id)(nil), "com.github.cceckman.discoirc.api.stream.Id")
	proto.RegisterType((*Match)(nil), "com.github.cceckman.discoirc.api.stream.Match")
	proto.RegisterType((*Filter)(nil), "com.github.cceckman.discoirc.api.stream.Filter")
	proto.RegisterType((*Event)(nil), "com.github.cceckman.discoirc.api.stream.Event")
	proto.RegisterType((*SubscribeRequest)(nil), "com.github.cceckman.discoirc.api.stream.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "com.github.cceckman.discoirc.api.stream.SubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventProvider service

type EventProviderClient interface {
	// Subscribe allows a client to register for events that match a filter.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventProvider_SubscribeClient, error)
}

type eventProviderClient struct {
	cc *grpc.ClientConn
}

func NewEventProviderClient(cc *grpc.ClientConn) EventProviderClient {
	return &eventProviderClient{cc}
}

func (c *eventProviderClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventProvider_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventProvider_serviceDesc.Streams[0], c.cc, "/com.github.cceckman.discoirc.api.stream.EventProvider/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProviderSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProvider_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type eventProviderSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventProviderSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventProvider service

type EventProviderServer interface {
	// Subscribe allows a client to register for events that match a filter.
	Subscribe(*SubscribeRequest, EventProvider_SubscribeServer) error
}

func RegisterEventProviderServer(s *grpc.Server, srv EventProviderServer) {
	s.RegisterService(&_EventProvider_serviceDesc, srv)
}

func _EventProvider_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProviderServer).Subscribe(m, &eventProviderSubscribeServer{stream})
}

type EventProvider_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type eventProviderSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventProviderSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.cceckman.discoirc.api.stream.EventProvider",
	HandlerType: (*EventProviderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventProvider_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xe2, 0x30,
	0x10, 0x55, 0x02, 0x09, 0x30, 0x80, 0xb4, 0xeb, 0xc3, 0x2a, 0xe2, 0xc4, 0x66, 0x0f, 0x8b, 0xb4,
	0x92, 0x77, 0xc5, 0x9e, 0xda, 0xde, 0x4a, 0xbf, 0x38, 0xb4, 0x42, 0xee, 0xa9, 0xbd, 0xb4, 0x89,
	0x63, 0xc0, 0x22, 0x5f, 0x75, 0x1c, 0xe8, 0x0f, 0xe8, 0x6f, 0xe8, 0xff, 0xe8, 0x3f, 0xac, 0x62,
	0x3b, 0x08, 0xf5, 0x14, 0x71, 0xcb, 0x78, 0xde, 0x9b, 0xf7, 0xe6, 0x8d, 0x02, 0x83, 0x42, 0x0a,
	0x16, 0x24, 0x38, 0x17, 0x99, 0xcc, 0xd0, 0x6f, 0x9a, 0x25, 0x78, 0xc5, 0xe5, 0xba, 0x0c, 0x31,
	0xa5, 0x8c, 0x6e, 0x92, 0x20, 0xc5, 0x11, 0x2f, 0x68, 0xc6, 0x05, 0xc5, 0x41, 0xce, 0xb1, 0x86,
	0xfb, 0x0b, 0xb0, 0xe7, 0x11, 0xfa, 0x01, 0x6e, 0x1e, 0x97, 0x2b, 0x9e, 0x7a, 0xd6, 0xd8, 0x9a,
	0xf4, 0x88, 0xa9, 0x90, 0x07, 0x9d, 0x94, 0xc9, 0x5d, 0x26, 0x36, 0x9e, 0xad, 0x1a, 0x75, 0x59,
	0x75, 0xe8, 0x3a, 0x48, 0x53, 0x16, 0x7b, 0x2d, 0xdd, 0x31, 0xa5, 0xff, 0x61, 0x81, 0x73, 0x1b,
	0x48, 0xba, 0x46, 0x67, 0x60, 0xf3, 0x48, 0x4d, 0xec, 0x4f, 0xff, 0xe0, 0x86, 0x8e, 0xf0, 0x3c,
	0x22, 0x36, 0x8f, 0xd0, 0x4f, 0x18, 0x24, 0xd5, 0x94, 0x27, 0x63, 0xac, 0xd2, 0xef, 0x92, 0xbe,
	0x7a, 0x5b, 0x68, 0x77, 0xbf, 0x60, 0xa8, 0x21, 0xb5, 0xc7, 0x96, 0xc2, 0x68, 0xde, 0x9d, 0x31,
	0xba, 0x07, 0xd5, 0x76, 0xdb, 0x07, 0xa0, 0x99, 0xf1, 0x4c, 0xc0, 0xbd, 0xe2, 0xb1, 0x64, 0x02,
	0xdd, 0x40, 0x47, 0x75, 0x58, 0xe1, 0x59, 0xe3, 0xd6, 0xa4, 0x3f, 0xc5, 0x8d, 0x8d, 0xab, 0xa5,
	0x49, 0x4d, 0xf7, 0x9f, 0xc1, 0xb9, 0xdc, 0xb2, 0x54, 0xa2, 0x19, 0xb8, 0x1a, 0x71, 0x4c, 0x14,
	0x86, 0x8a, 0x10, 0xb4, 0x25, 0x7b, 0x95, 0xe6, 0x0c, 0xea, 0xdb, 0xdf, 0xc1, 0xb7, 0xfb, 0x32,
	0x2c, 0xa8, 0xe0, 0x21, 0x23, 0xec, 0xa5, 0x64, 0x85, 0x44, 0xd7, 0xe0, 0x2e, 0xd5, 0x26, 0x46,
	0xec, 0x6f, 0x63, 0x31, 0x1d, 0x00, 0x31, 0x74, 0x34, 0x82, 0x6e, 0x18, 0xd0, 0xcd, 0x92, 0xc7,
	0xb1, 0x12, 0x75, 0xc8, 0xbe, 0xf6, 0x1f, 0xe0, 0xfb, 0x81, 0x70, 0x91, 0x67, 0x69, 0xc1, 0xd0,
	0x05, 0x38, 0xac, 0xda, 0xd7, 0x08, 0x37, 0xcf, 0x4d, 0xa5, 0x44, 0x34, 0x79, 0xfa, 0x6e, 0xc1,
	0x50, 0x3d, 0x2c, 0x44, 0xb6, 0xe5, 0x11, 0x13, 0xe8, 0xcd, 0x82, 0xde, 0x5e, 0x0d, 0x9d, 0x34,
	0x1e, 0xfb, 0x35, 0x9a, 0xd1, 0xe9, 0x31, 0x54, 0xbd, 0xdc, 0x3f, 0xeb, 0xbc, 0xfb, 0x68, 0x4e,
	0x11, 0xba, 0xea, 0x17, 0xfb, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xca, 0xfd, 0xcd, 0xe6, 0x72,
	0x03, 0x00, 0x00,
}
