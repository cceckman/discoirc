// Code generated by protoc-gen-go.
// source: stream.proto
// DO NOT EDIT!

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	stream.proto

It has these top-level messages:
	Id
	Match
	Filter
	Event
*/
package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Id identifies a particular stream.
type Id struct {
	// Messages from discoirc itself come under the 'discoirc' plugin.
	Plugin  string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	Channel string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Id) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *Id) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Id) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// Match defines a pattern with with to match an Id.
// The id specifies values to match; the additional fields specify whether
// or not the fields should be used to match.
type Match struct {
	Id           *Id  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MatchPlugin  bool `protobuf:"varint,2,opt,name=match_plugin,json=matchPlugin" json:"match_plugin,omitempty"`
	MatchNetwork bool `protobuf:"varint,3,opt,name=match_network,json=matchNetwork" json:"match_network,omitempty"`
	MatchChannel bool `protobuf:"varint,4,opt,name=match_channel,json=matchChannel" json:"match_channel,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Match) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Match) GetMatchPlugin() bool {
	if m != nil {
		return m.MatchPlugin
	}
	return false
}

func (m *Match) GetMatchNetwork() bool {
	if m != nil {
		return m.MatchNetwork
	}
	return false
}

func (m *Match) GetMatchChannel() bool {
	if m != nil {
		return m.MatchChannel
	}
	return false
}

// A Filter defines a set of streams to subscribe to.
// It is an inclusive filter, e.g. matching any Match allows it to match.
type Filter struct {
	Matches []*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Filter) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

// Event expresses an event on a particular stream.
type Event struct {
	Stream *Id    `protobuf:"bytes,1,opt,name=stream" json:"stream,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Event) GetStream() *Id {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *Event) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "com.github.cceckman.discoirc.api.stream.Id")
	proto.RegisterType((*Match)(nil), "com.github.cceckman.discoirc.api.stream.Match")
	proto.RegisterType((*Filter)(nil), "com.github.cceckman.discoirc.api.stream.Filter")
	proto.RegisterType((*Event)(nil), "com.github.cceckman.discoirc.api.stream.Event")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x95, 0xa4, 0x4d, 0xcb, 0xa5, 0x2c, 0x1e, 0x90, 0xc7, 0x12, 0x06, 0x2a, 0x21, 0x79,
	0x28, 0x23, 0x1b, 0x15, 0x88, 0x0e, 0xa0, 0xca, 0x23, 0x0b, 0xb8, 0xb6, 0xd5, 0x58, 0x4d, 0xec,
	0xc8, 0x71, 0x81, 0xd7, 0xe2, 0x0d, 0x51, 0x6c, 0x07, 0x31, 0x46, 0x6c, 0xb9, 0xfc, 0xdf, 0x9d,
	0x3f, 0xfb, 0x60, 0xd1, 0x39, 0x2b, 0x59, 0x43, 0x5a, 0x6b, 0x9c, 0x41, 0xd7, 0xdc, 0x34, 0xe4,
	0xa0, 0x5c, 0x75, 0xda, 0x13, 0xce, 0x25, 0x3f, 0x36, 0x4c, 0x13, 0xa1, 0x3a, 0x6e, 0x94, 0xe5,
	0x84, 0xb5, 0x8a, 0x04, 0xbc, 0xdc, 0x41, 0xba, 0x15, 0xe8, 0x02, 0xf2, 0xb6, 0x3e, 0x1d, 0x94,
	0xc6, 0xc9, 0x32, 0x59, 0x9d, 0xd1, 0x58, 0x21, 0x0c, 0x33, 0x2d, 0xdd, 0xa7, 0xb1, 0x47, 0x9c,
	0xfa, 0x60, 0x28, 0xfb, 0x84, 0x57, 0x4c, 0x6b, 0x59, 0xe3, 0x2c, 0x24, 0xb1, 0x2c, 0xbf, 0x13,
	0x98, 0x3e, 0x33, 0xc7, 0x2b, 0x74, 0x07, 0xa9, 0x12, 0x7e, 0x62, 0xb1, 0xbe, 0x21, 0x23, 0x8d,
	0xc8, 0x56, 0xd0, 0x54, 0x09, 0x74, 0x09, 0x8b, 0xa6, 0x9f, 0xf2, 0x16, 0xc5, 0xfa, 0xf3, 0xe7,
	0xb4, 0xf0, 0xff, 0x76, 0xc1, 0xee, 0x0a, 0xce, 0x03, 0x32, 0x38, 0x66, 0x9e, 0x09, 0x7d, 0x2f,
	0x51, 0xf4, 0x17, 0x1a, 0x74, 0x27, 0x7f, 0xa0, 0x4d, 0x74, 0xa6, 0x90, 0x3f, 0xaa, 0xda, 0x49,
	0x8b, 0x9e, 0x60, 0xe6, 0x13, 0xd9, 0xe1, 0x64, 0x99, 0xad, 0x8a, 0x35, 0x19, 0x2d, 0xee, 0x2f,
	0x4d, 0x87, 0xf6, 0xf2, 0x1d, 0xa6, 0x0f, 0x1f, 0x52, 0x3b, 0xb4, 0x81, 0x3c, 0x10, 0xff, 0x79,
	0x8a, 0xd8, 0x8a, 0x10, 0x4c, 0x9c, 0xfc, 0x72, 0x71, 0x0d, 0xfe, 0xfb, 0x7e, 0xfe, 0x1a, 0xd3,
	0x7d, 0xee, 0xb7, 0x7e, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb2, 0x71, 0x1e, 0x05, 0x02,
	0x00, 0x00,
}
